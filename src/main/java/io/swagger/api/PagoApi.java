/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.40).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.dto.PagoDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-02-15T04:20:31.519478174Z[GMT]")
@Validated
public interface PagoApi {

    @Operation(summary = "", description = "Consultar los pagos", tags={ "Pago" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PagoDto.class)))),
        
        @ApiResponse(responseCode = "400", description = "error") })
    @RequestMapping(value = "/pago",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PagoDto>> pagoGet();


    @Operation(summary = "Eliminar un pago", description = "", tags={ "Pago" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se ha eliminado con exito"),
        
        @ApiResponse(responseCode = "404", description = "Id invalido") })
    @RequestMapping(value = "/pago/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> pagoIdDelete(@Parameter(in = ParameterIn.PATH, description = "Eliminar con el ID", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Consultar un pago", description = "Permite obtener un pago con el ID", tags={ "Pago" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PagoDto.class))),
        
        @ApiResponse(responseCode = "404", description = "Id invalido") })
    @RequestMapping(value = "/pago/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PagoDto> pagoIdGet(@Parameter(in = ParameterIn.PATH, description = "referencia de pago", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Actualizar un pago", description = "Actualizar un pago existente", tags={ "Pago" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Actualizacion exitosa"),
        
        @ApiResponse(responseCode = "404", description = "id invalido") })
    @RequestMapping(value = "/pago/{id}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> pagoIdPut(@Parameter(in = ParameterIn.PATH, description = "referencia de pago", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Actualizacion de pago", schema=@Schema()) @Valid @RequestBody PagoDto body);


    @Operation(summary = "", description = "Permite crear un pago", tags={ "Pago" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Pago exitoso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PagoDto.class))),
        
        @ApiResponse(responseCode = "400", description = "error") })
    @RequestMapping(value = "/pago",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<PagoDto> pagoPost(@Parameter(in = ParameterIn.DEFAULT, description = "Creacion de pago", schema=@Schema()) @Valid @RequestBody PagoDto body);

}

